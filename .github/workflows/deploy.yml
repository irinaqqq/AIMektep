name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint & Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: "3.11" }
      - name: Install linters
        run: pip install black flake8 mypy || true
      - name: Run linters
        run: |
          black --check . || true
          flake8 || true
          mypy . || true

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # <-- –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ PYTHONPATH -->
      - name: Ensure repo root is in PYTHONPATH
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Install dependencies & test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –∫–∞–∫ –ø–∞–∫–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤ editable —Ä–µ–∂–∏–º–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          if [ -f setup.py ] || [ -f pyproject.toml ]; then pip install -e .; fi
          pip install pytest pytest-asyncio httpx

      - name: Run tests
        run: pytest -q

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            set -e
            echo "üöÄ Connecting to server and deploying AIMektep..."

            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if [ ! -d "/home/${{ secrets.SERVER_USER }}/AIMektep" ]; then
              echo "üìÅ Cloning repo for the first time..."
              git clone https://${{ secrets.TOKEN_DEPLOY }}@github.com/irinaqqq/AIMektep.git /home/${{ secrets.SERVER_USER }}/AIMektep
            fi

            cd /home/${{ secrets.SERVER_USER }}/AIMektep

            echo "üß≠ Pulling latest changes..."
            git pull origin main

            echo "üîß Building and restarting container..."
            docker compose down
            docker compose up -d --build

            echo "‚úÖ Deployment completed successfully!"
